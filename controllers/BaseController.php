<?php


namespace app\controllers;

use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\rest\ActiveController;
use yii\web\HttpException;


/**
 * Class BasicController
 */
class BaseController extends ActiveController
{
    public function behaviors()
    {
        $behaviors = parent::behaviors();

        // remove corsFilter filter
        unset($behaviors['corsFilter']);

        // add CORS filter
        $behaviors['corsFilter'] = [
            'class' => \yii\filters\Cors::className(),
            'cors' => [
                'Origin' => ['*'],
                'Access-Control-Request-Method' => ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
                'Access-Control-Request-Headers' => ['*'],
                'Access-Control-Allow-Credentials' => true,
                'Access-Control-Max-Age' => 86400,
                'Access-Control-Expose-Headers' => [
                    'X-Pagination-Per-Page',
                    'X-Pagination-Total-Count',
                    'X-Pagination-Current-Page',
                    'X-Pagination-Page-Count',
                ],
            ]
        ];


        $behaviors['authenticator'] = [
            'class' => CompositeAuth::className(),
            'authMethods' => [
                HttpBearerAuth::className(),
                QueryParamAuth::className(),
            ],
            'except' => ['options']
        ];
        // avoid authentication on CORS-pre-flight requests (HTTP OPTIONS method)
        $behaviors['authenticator']['except'] = ['options'];

        return $behaviors;
    }


    //On each action get user by access_token and update last_active_at column
    public function beforeAction($action)
    {
        $user = \Yii::$app->user->identity;
        $currentTime = time();
        if ($user && $user->access_token) {
            if ($currentTime - $user->last_active_at > 3000) {
                $user->access_token = null;
                $user->save();
                $this->asJson([
                    'success' => false,
                    'error' => 'User inactive for too long',
                ]);
                return false;
            } else {
                $user->last_active_at = $currentTime;
                $user->save();
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

}